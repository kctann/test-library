name: Core Library CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'test-library-core/**'
      - 'pom.xml'
      - '.github/workflows/core-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'test-library-core/**'
      - 'pom.xml'
      - '.github/workflows/core-ci.yml'

jobs:
  core-library-test:
    name: Core Library Tests (Java ${{ matrix.java }} + Spring Boot ${{ matrix.spring-boot }})
    runs-on: ubuntu-latest
    
    strategy:
      # Don't cancel other jobs if one fails - we want to see all combination results
      fail-fast: false
      matrix:
        include:
          # Java 11 - only Spring Boot 2.7.x (compatible)
          - java: 11
            spring-boot: 2.7.18
          # Java 17 - all Spring Boot versions
          - java: 17
            spring-boot: 2.7.18
          - java: 17
            spring-boot: 3.0.13
          - java: 17
            spring-boot: 3.2.0
          # Java 21 - all Spring Boot versions
          - java: 21
            spring-boot: 2.7.18
          - java: 21
            spring-boot: 3.0.13
          - java: 21
            spring-boot: 3.2.0
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-java${{ matrix.java }}-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2-java${{ matrix.java }}-
          ${{ runner.os }}-m2-
        
    - name: Make mvnw executable
      run: chmod +x ./mvnw
        
    - name: Compile Core Library
      run: |
        echo "üèóÔ∏è Compiling Core Library with Java ${{ matrix.java }} + Spring Boot ${{ matrix.spring-boot }}"
        cd test-library-core
        ../mvnw clean compile -B -V -Dspring-boot.version=${{ matrix.spring-boot }}
        echo "‚úÖ Compilation successful"
        
    - name: Run Core Library Tests
      run: |
        echo "üß™ Running Core Library Tests"
        cd test-library-core
        ../mvnw test -B -Dspring-boot.version=${{ matrix.spring-boot }}
        echo "‚úÖ All tests passed"
        
    - name: Run Integration Tests
      run: |
        echo "üîó Running Integration Tests"
        cd test-library-core
        ../mvnw test -Dtest=*IntegrationTest -B -Dspring-boot.version=${{ matrix.spring-boot }}
        echo "‚úÖ Integration tests completed"
        
    - name: Verify Library Packaging
      run: |
        echo "üì¶ Verifying Library Packaging"
        cd test-library-core
        ../mvnw package -DskipTests -B -Dspring-boot.version=${{ matrix.spring-boot }}
        
        # Verify JAR was created (using proper wildcard expansion)
        JAR_FILES=(target/test-library-core-*.jar)
        if [ -f "${JAR_FILES[0]}" ]; then
          echo "‚úÖ Library JAR created successfully"
          ls -la target/*.jar
          
          # Check JAR size (should be small due to provided scope)
          JAR_SIZE=$(stat -c%s "${JAR_FILES[0]}")
          echo "üìè JAR size: $JAR_SIZE bytes"
          
          if [ $JAR_SIZE -lt 50000 ]; then
            echo "‚úÖ JAR size is appropriate (< 50KB)"
          else
            echo "‚ö†Ô∏è JAR size might be too large - check provided dependencies"
          fi
          
          # Verify JAR contents
          echo "üìã JAR contents:"
          jar -tf "${JAR_FILES[0]}" | head -20
          
          # Verify AutoConfiguration file exists
          if jar -tf "${JAR_FILES[0]}" | grep -q "META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports"; then
            echo "‚úÖ AutoConfiguration imports file found"
          else
            echo "‚ùå AutoConfiguration imports file missing"
            exit 1
          fi
          
        else
          echo "‚ùå Library JAR not found"
          exit 1
        fi
        
    - name: Verify Provided Dependencies
      run: |
        echo "üîç Verifying Provided Dependencies"
        cd test-library-core
        
        JAR_FILES=(target/test-library-core-*.jar)
        if [ -f "${JAR_FILES[0]}" ]; then
          # Check that Spring Boot classes are NOT included in JAR
          if jar -tf "${JAR_FILES[0]}" | grep -q "org/springframework"; then
            echo "‚ùå Found Spring classes in JAR - provided scope not working correctly"
            jar -tf "${JAR_FILES[0]}" | grep "org/springframework" | head -5
            exit 1
          else
            echo "‚úÖ No Spring Boot classes found in JAR - provided scope working correctly"
          fi
          
          # Verify our classes are included
          if jar -tf "${JAR_FILES[0]}" | grep -q "com/jamestann/test/library"; then
            echo "‚úÖ Library classes found in JAR"
          else
            echo "‚ùå Library classes not found in JAR"
            exit 1
          fi
        else
          echo "‚ùå JAR file not found for verification"
          exit 1
        fi
        
    - name: Generate Test Report
      if: always()
      run: |
        REPORT_FILE="test-report-java${{ matrix.java }}-spring${{ matrix.spring-boot }}.md"
        echo "## Core Library Test Report (Java ${{ matrix.java }} + Spring Boot ${{ matrix.spring-boot }})" >> $REPORT_FILE
        echo "" >> $REPORT_FILE
        echo "- **Java Version**: ${{ matrix.java }}" >> $REPORT_FILE
        echo "- **Spring Boot Version**: ${{ matrix.spring-boot }}" >> $REPORT_FILE
        echo "- **Build Status**: ${{ job.status }}" >> $REPORT_FILE
        echo "- **Test Results**: $(cd test-library-core && find target -name "*.xml" -path "*/surefire-reports/*" 2>/dev/null | wc -l) test files generated" >> $REPORT_FILE
        
        cd test-library-core
        JAR_FILES=(target/test-library-core-*.jar)
        if [ -f "${JAR_FILES[0]}" ]; then
          JAR_SIZE=$(stat -c%s "${JAR_FILES[0]}")
          echo "- **JAR Size**: $JAR_SIZE bytes" >> ../$REPORT_FILE
          echo "- **JAR Created**: ‚úÖ Yes" >> ../$REPORT_FILE
        else
          echo "- **JAR Created**: ‚ùå No" >> ../$REPORT_FILE
        fi
        cd ..
        
        cat $REPORT_FILE
        
    - name: Upload Library JAR
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: test-library-core-java${{ matrix.java }}-spring${{ matrix.spring-boot }}
        path: |
          test-library-core/target/*.jar
          test-library-core/target/surefire-reports/
        retention-days: 90
        
    - name: Upload Test Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-report-java${{ matrix.java }}-spring${{ matrix.spring-boot }}
        path: test-report-java${{ matrix.java }}-spring${{ matrix.spring-boot }}.md
        retention-days: 30

  # Summary job to provide overall status
  core-ci-summary:
    name: Core CI Summary
    runs-on: ubuntu-latest
    needs: core-library-test
    if: always()
    
    steps:
    - name: Generate Summary Report
      run: |
        echo "# Core Library CI Summary" > core-ci-summary.md
        echo "" >> core-ci-summary.md
        echo "Generated on: $(date)" >> core-ci-summary.md
        echo "" >> core-ci-summary.md
        
        echo "## Test Results by Java Version" >> core-ci-summary.md
        echo "| Java Version | Status |" >> core-ci-summary.md
        echo "|--------------|--------|" >> core-ci-summary.md
        
        # This would need to be populated with actual job results
        # For now, show the matrix we tested
        echo "| 11 | ${{ needs.core-library-test.result }} |" >> core-ci-summary.md
        echo "| 17 | ${{ needs.core-library-test.result }} |" >> core-ci-summary.md
        echo "| 21 | ${{ needs.core-library-test.result }} |" >> core-ci-summary.md
        
        echo "" >> core-ci-summary.md
        echo "## Quick Links" >> core-ci-summary.md
        echo "- üì¶ Library JARs available in CI Artifacts" >> core-ci-summary.md
        echo "- üìä Test reports available in CI Artifacts" >> core-ci-summary.md
        echo "- ‚è±Ô∏è Total execution time: Approximately 2-3 minutes" >> core-ci-summary.md
        
        cat core-ci-summary.md
        
    - name: Upload Summary Report
      uses: actions/upload-artifact@v4
      with:
        name: core-ci-summary
        path: core-ci-summary.md
        retention-days: 30